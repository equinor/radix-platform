# Install Terraform, configure OpenID Connect (OIDC) authentication to Azure, create a Terraform plan, and apply the plan on push to branch 'master'.

on:
  workflow_call:
    inputs:
      cluster_name:
        description: Name of the cluster
        type: string
        required: true

      environment:
        description: The environment that the job references.
        type: string
        required: true

      radix_environment:
        description: The radix_environment that the job references.
        type: string
        required: true

      terraform_version:
        description: The version of Terraform to install.
        type: string
        required: false
        default: latest

      working_directory:
        description: The working directory to run the Terraform commands in.
        type: string
        required: false
        default: '.'

    secrets:
      AZURE_CLIENT_ID:
        description: The client ID of the Azure AD service principal to use for authenticating to Azure.
        required: true

      AZURE_SUBSCRIPTION_ID:
        description: The ID of the Azure subscription to create the resources in.
        required: true

      AZURE_TENANT_ID:
        description: The ID of the Azure tenant to create the resources in.
        required: true

jobs:
  Terraform:
    name: Terraform
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    # Queue jobs that target the same Terraform configuration.
    concurrency:
      group: terraform @ ${{ inputs.working_directory }}
      cancel-in-progress: false

    # Set permissions required to login to Azure using OIDC.
    permissions:
      id-token: write
      contents: read

    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working_directory }}

    # Configure OIDC authentication to Azure using environment variables.
    # Required by the AzureRM backend and provider.
    env:
      ARM_USE_OIDC: true
      ARM_USE_AZUREAD: true
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      container_name: tfstate
      key: ${{ inputs.radix_environment }}.${{ inputs.cluster_name }}.terraform.tfstate
      resource_group_name: s941-tfstate
      storage_account_name: radixinfra${{ inputs.radix_environment }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ inputs.terraform_version }}

      - name: Terraform Format
        run: terraform fmt -check

      - name: Terraform Init
        run: |
          terraform init \
          -backend-config='container_name=${{ env.container_name }}' \
          -backend-config='key=${{ env.key }}' \
          -backend-config='resource_group_name=${{ env.resource_group_name }}' \
          -backend-config='storage_account_name=${{ env.storage_account_name }}'

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        if: github.event_name == 'pull_request'
        run: terraform plan --var-file=../../../radix-zone/radix_zone_dev.tfvars

      - name: Terraform Apply
        if: (github.event_name == 'push' && github.ref == 'refs/heads/master') || github.event_name == 'schedule'
        run: terraform apply --var-file=../../../radix-zone/radix_zone_dev.tfvars -auto-approve
