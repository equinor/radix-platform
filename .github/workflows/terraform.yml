# Install Terraform, configure OpenID Connect (OIDC) authentication to Azure, create a Terraform plan, and apply the plan on push to branch 'master'.

on:
  workflow_call:
    inputs:
      cluster_name:
        description: Name of the cluster
        type: string
        required: true

      environment:
        description: The environment that the job references.
        type: string
        required: true

      radix_environment:
        description: The radix_environment that the job references.
        type: string
        required: true

      subscription:
        description: The subscription to deploy in
        type: string
        required: true

      terraform_version:
        description: The version of Terraform to install.
        type: string
        required: false
        default: latest

      working_directory:
        description: The working directory to run the Terraform commands in.
        type: string
        required: false
        default: '.'

    secrets:
      AZURE_CLIENT_ID:
        description: The client ID of the Azure AD service principal to use for authenticating to Azure.
        required: true

      AZURE_SUBSCRIPTION_ID:
        description: The ID of the Azure subscription to create the resources in.
        required: true

      AZURE_TENANT_ID:
        description: The ID of the Azure tenant to create the resources in.
        required: true

jobs:
  Terraform:
    name: Terraform
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    # Queue jobs that target the same Terraform configuration.
    concurrency:
      group: terraform @ ${{ inputs.working_directory }}
      cancel-in-progress: false

    # Set permissions required to login to Azure using OIDC.
    permissions:
      id-token: write
      contents: read

    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working_directory }}

    # Configure OIDC authentication to Azure using environment variables.
    # Required by the AzureRM backend and provider.
    env:
      root_src: '../../../../../..'
      ARM_USE_OIDC: true
      ARM_USE_AZUREAD: true
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      container_name: clusters
      key: ${{ inputs.radix_environment }}.${{ inputs.cluster_name }}.terraform.tfstate
      resource_group_name: ${{ inputs.subscription }}-tfstate
      storage_account_name: ${{ inputs.subscription }}radixinfra

    outputs:
      tf-fmt: ${{ steps.fmt.outcome }}
      tf-init: ${{ steps.init.outcome }}
      tf-validate: ${{ steps.validate.outcome }}
      tf-plan: ${{ steps.plan.outcome }}
      plan: ${{ steps.get_content.outputs.plan }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Az CLI login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}

      - name: Get GitHub Public IP
        id: github_public_ip
        run: echo "ipv4=$(curl 'https://ifconfig.me/ip')" >> $GITHUB_OUTPUT

      - name: Add GitHub IP to StorageAccount
        run: |
          az storage account network-rule add \
            --resource-group "${{ env.resource_group_name }}" \
            --account-name "${{ env.storage_account_name }}" \
            --ip-address ${{ steps.github_public_ip.outputs.ipv4 }} >/dev/null

      - name: Lets sleep for 30 seconds for FW rule to complete
        run: sleep 30s

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ inputs.terraform_version }}
          terraform_wrapper: false

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: |
          terraform init \
            -backend-config='container_name=${{ env.container_name }}' \
            -backend-config='key=${{ env.key }}' \
            -backend-config='resource_group_name=${{ env.resource_group_name }}' \
            -backend-config='storage_account_name=${{ env.storage_account_name }}'

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: |
          terraform plan \
            --var-file=${{ env.root_src }}/terraform/radix-zone/radix_zone_dev.tfvars \
            -no-color \
            -out tf.plan
        continue-on-error: true

      - name: Terraform Show
        id: show
        if: github.event_name == 'pull_request'
        run: terraform show -no-color tf.plan 2>&1 > /tmp/plan.txt

      - name: Get content
        id: get_content
        if: github.event_name == 'pull_request'
        run: |
          plan=$(cat /tmp/plan.txt)

          create=""
          createOut=""
          destroy=""
          destroyOut=""
          update=""
          updateOut=""
          changesOut=""

          while read -r line; do
            if [[ "$line" == *"will be created"* ]]; then
              create+="${line//"# "/"+ "} <br/>"
            elif [[ "$line" == *"will be destroyed"* ]]; then
              destroy+="${line//"# "/"- "} <br/>"
            elif [[ "$line" == *"will be updated in-place"* ]]; then
              update+="${line//"# "/"~ "} <br/>"
            fi
          done < <(echo "${plan}")

          numberOfChanges=$((${#create} + ${#destroy} + ${#update}))

          if [ ${#create} -gt 0 ]; then
            createOut+="The following resources will be created <br/> ${create}"
          fi

          if [ ${#destroy} -gt 0 ]; then
            destroyOut+="The following resources will be destroyed <br/> ${destroy}"
          fi

          if [ ${#update} -gt 0 ]; then
            updateOut+="The following resources will be updated <br/> ${update}"
          fi

          if [ ${numberOfChanges} -eq 0 ]; then
            changesOut+="No changes. Your infrastructure matches the configuration. <br/>"
          fi

          out="$createOut $destroyOut $updateOut $changesOut"

          echo "plan=$(echo ${out})" >> $GITHUB_OUTPUT

      - name: Terraform Apply
        if: (github.event_name == 'push' && github.ref == 'refs/heads/master') || github.event_name == 'schedule'
        run: terraform apply --var-file=../../../../../radix-zone/radix_zone_${{ inputs.radix_environment }}.tfvars -auto-approve

      - name: Revoke GitHub IP on StorageAccount
        run: |
          az storage account network-rule remove \
            --resource-group "${{ env.resource_group_name }}" \
            --account-name "${{ env.storage_account_name }}" \
            --ip-address ${{ steps.github_public_ip.outputs.ipv4 }} >/dev/null

  Create_comment:
    if: github.event_name == 'pull_request'
    needs: [Terraform]
    name: Create comment
    runs-on: ubuntu-latest
    steps:
      - name: Create comment
        uses: peter-evans/create-or-update-comment@v2
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            #### Directory: ${{ inputs.working_directory }}
            #### Terraform Format and Style 🖌 ${{ needs.Terraform.outputs.tf-fmt }}
            #### Terraform Initialization ⚙️ ${{ needs.Terraform.outputs.tf-init }}
            #### Terraform Validation 🤖 ${{ needs.Terraform.outputs.tf-validate }}
            #### Terraform Plan 📖 ${{ needs.Terraform.outputs.tf-plan }}

            <details><summary>Show Plan</summary>
            ${{ needs.Terraform.outputs.plan }}
            </details>
