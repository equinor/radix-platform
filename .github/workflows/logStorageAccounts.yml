name: LogStorageAccounts

on:
  push:
    branches:
      - RA-1592-sqlLogStorageAccount
  pull_request:
    branches:
      - Master

env:
  # Prod
  prodRgName: rg-radix-shared-prod

  # Dev
  devRgName: rg-radix-shared-dev
  devSubscriptionId: '16ede44b-1f74-40a5-b428-46cca9a5741b'

  # Shared
  storageName: radixsqllogs #Also suffix with environment
  SOURCE_DIR2: $GITHUB_WORKSPACE

jobs:
  dev:
    runs-on: ubuntu-latest
    env:
        envName: dev
    steps:

    # Checks-out your repository under $GITHUB_WORKSPACE
    - uses: actions/checkout@v2

    # Set dynamic variables for the job
    - name: Set job variables
      shell: pwsh
      run: |

        # Set timestamp variable for jobs
        $currentTime = (get-date).ToString("dd-MM-yyyyThhMMZ")
        Write-Output "::set-env name=timestamp::$currentTime"

    # Install powershell modules
    - name: Install powershell modules
      shell: pwsh
      run: |
        
        Install-Module az.resources -force

    - name: Azure login
      shell: pwsh
      run: |
        $azureAplicationId = "${{ secrets.DEV_AZURE_CREDENTIALS_CLIENT_ID }}"
        $azureTenantId = "${{ secrets.AZURE_TENANT_ID }}"
        $azurePassword = ConvertTo-SecureString "${{ secrets.DEV_AZURE_CREDENTIALS_CLIENT_SECRET }}" -AsPlainText -Force
        $psCred = New-Object System.Management.Automation.PSCredential($azureAplicationId , $azurePassword)
        Add-azAccount -Credential $psCred -TenantId $azureTenantId -ServicePrincipal

    - name: Set Azure subscription
      shell: pwsh
      run: |

        Set-AzContext -SubscriptionId "${{ env.devSubscriptionId }}"
        
        $subscription = (Get-AzContext)
        if ($subscription.Subscription.Id -eq "${{ env.devSubscriptionId }}") {
          Write-Output "Using subscription $($subscription.subscription.Name)"
          exit 0
          
        }
        else {
          Write-Output "Subscription does match. Terminating script"
          exit 1
        }

    # # Azure Login to dev environment
    # - uses: azure/login@v1.1
    #   with:
    #     creds: ${{ secrets.DEV_AZURE_CREDENTIALS }}
    #     enable-AzPSSession: true


    # Create storage account and container
    - name: Storage Account for SQL logs
      shell: pwsh
      run: |

        $env:GITHUB_WORKSPACE
        Get-ChildItem $env:GITHUB_WORKSPACE

        # # Set task variables
        # $rg = "${{ env.devRgName }}"
        # $templateFile = "${{ env.GITHUB_WORKSPACE }}/arm-templates/storageAccount.json"
        # $storeAccountName = "${{ env.storageName }}${{ env.envName }}"

        # # Deploy shared Storage Account for SQL Logging in dev
        # New-AzResourceGroupDeployment `
        #   -Name "sql-log-${{ env.timestamp }}" `
        #   -ResourceGroupName $rg `
        #   -TemplateFile $templateFile `
        #   -storageAccountName $storeAccountName `
        #   -accountType Standard_LRS `
        #   -kind StorageV2 `
        #   -accessTier hot

        #   # Set soft delete protection on Storage Account
        #   $storageAcoount = Get-AzStorageAccount | where-object{$_.StorageAccountName -match "$storeAccountName"}
        #   $storageAcoount | Enable-AzStorageDeleteRetentionPolicy -RetentionDays 30

    # Azure logout 
    - name: logout
      shell: pwsh
      run: |
        Logout-azAccount