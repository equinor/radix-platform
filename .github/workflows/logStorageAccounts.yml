name: LogStorageAccounts

on:
  push:
    branches:
      - master
      - RA-1256auditLog
  pull_request:
    branches:
      - master

env:
  # Prod
  prodRgName: rg-radix-shared-prod
  prodSubscriptionId: 'ded7ca41-37c8-4085-862f-b11d21ab341a'

  # Dev
  devRgName: rg-radix-shared-dev
  devSubscriptionId: '16ede44b-1f74-40a5-b428-46cca9a5741b'

  # Shared
  sqlLogStorageName: radixsqllogs #Also suffix with environment
  auditLogStorageName: radixauditlogs

jobs:
############## DEV STAGE ##############

  dev:
    runs-on: ubuntu-latest
    env:
        envName: dev
    steps:

    # Checks-out your repository under $GITHUB_WORKSPACE
    - uses: actions/checkout@v2

    # Set dynamic variables for the job
    - name: Set job variables
      shell: pwsh
      run: |

        # Set timestamp variable for jobs
        $currentTime = (get-date).ToString("dd-MM-yyyyThhMMZ")
        Write-Output "::set-env name=timestamp::$currentTime"

    # Install powershell modules
    - name: Install powershell modules
      shell: pwsh
      run: |
        
        Install-Module az.resources -force
        Install-Module az.storage -force

    # Azure login for powershell
    - name: Azure login
      shell: pwsh
      run: |
        $azureAplicationId = "${{ secrets.DEV_AZURE_CREDENTIALS_CLIENT_ID }}"
        $azureTenantId = "${{ secrets.AZURE_TENANT_ID }}"
        $azurePassword = ConvertTo-SecureString "${{ secrets.DEV_AZURE_CREDENTIALS_CLIENT_SECRET }}" -AsPlainText -Force
        $psCred = New-Object System.Management.Automation.PSCredential($azureAplicationId , $azurePassword)
        Add-azAccount -Credential $psCred -TenantId $azureTenantId -ServicePrincipal


    # Set subsctiption to develop and verify
    - name: Set Azure subscription
      shell: pwsh
      run: |
      
        Set-AzContext -SubscriptionId "${{ env.devSubscriptionId }}"
        
        $subscription = (Get-AzContext)
        if ($subscription.Subscription.Id -eq "${{ env.devSubscriptionId }}") {
          Write-Output "Using subscription $($subscription.subscription.Name)"
          exit 0
          
        }
        else {
          Write-Output "Subscription does not match. Terminating script"
          exit 1
        }


    # Create storage account for SQL logs
    - name: Storage Account for SQL logs
      shell: pwsh
      run: |

        # Set task variables
        $rg = "${{ env.devRgName }}"
        $templateFile = "$env:GITHUB_WORKSPACE/arm-templates/storageAccount.json"
        $storeAccountName = "${{ env.sqlLogStorageName }}${{ env.envName }}"

        # Deploy shared Storage Account for SQL Logging in dev
        New-AzResourceGroupDeployment `
          -Name "sql-log-${{ env.timestamp }}" `
          -ResourceGroupName $rg `
          -TemplateFile $templateFile `
          -storageAccountName $storeAccountName `
          -accountType Standard_LRS `
          -kind StorageV2 `
          -accessTier hot

          # Set soft delete protection on Storage Account
          $storageAcoount = Get-AzStorageAccount | where-object{$_.StorageAccountName -match "$storeAccountName"}
          $storageAcoount | Enable-AzStorageDeleteRetentionPolicy -RetentionDays 30

    # Create storage account for Azure audit logs
    - name: Storage Account for Audit logs
      shell: pwsh
      run: |

        # Set task variables
        $rg = "${{ env.devRgName }}"
        $templateFile = "$env:GITHUB_WORKSPACE/arm-templates/storageAccount.json"
        $storeAccountName = "${{ env.auditLogStorageName }}${{ env.envName }}"

        # Deploy Storage Account for Audit logs
        New-AzResourceGroupDeployment `
          -Name "sql-log-${{ env.timestamp }}" `
          -ResourceGroupName $rg `
          -TemplateFile $templateFile `
          -storageAccountName $storeAccountName `
          -accountType Standard_LRS `
          -kind StorageV2 `
          -accessTier cold

          # Set soft delete protection on Storage Account
          $storageAcoount = Get-AzStorageAccount | where-object{$_.StorageAccountName -match "$storeAccountName"}
          $storageAcoount | Enable-AzStorageDeleteRetentionPolicy -RetentionDays 30



    # Azure logout 
    - name: logout
      shell: pwsh
      run: |
        Logout-azAccount


############## PROD STAGE ##############

  prod:
    needs: dev
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    env:
        envName: prod
    steps:

    # Checks-out your repository under $GITHUB_WORKSPACE
    - uses: actions/checkout@v2

    # Set dynamic variables for the job
    - name: Set job variables
      shell: pwsh
      run: |

        # Set timestamp variable for jobs
        $currentTime = (get-date).ToString("dd-MM-yyyyThhMMZ")
        Write-Output "::set-env name=timestamp::$currentTime"

    # Install powershell modules
    - name: Install powershell modules
      shell: pwsh
      run: |
        
        Install-Module az.resources -force
        Install-Module az.storage -force

    # Azure login for powershell
    - name: Azure login
      shell: pwsh
      run: |
        $azureAplicationId = "${{ secrets.PROD_AZURE_CREDENTIALS_CLIENT_ID }}"
        $azureTenantId = "${{ secrets.AZURE_TENANT_ID }}"
        $azurePassword = ConvertTo-SecureString "${{ secrets.PROD_AZURE_CREDENTIALS_CLIENT_SECRET }}" -AsPlainText -Force
        $psCred = New-Object System.Management.Automation.PSCredential($azureAplicationId , $azurePassword)
        Add-azAccount -Credential $psCred -TenantId $azureTenantId -ServicePrincipal


    # Set subsctiption to prouction and verify
    - name: Set Azure subscription
      shell: pwsh
      run: |

        Set-AzContext -SubscriptionId "${{ env.prodSubscriptionId }}"
        
        $subscription = (Get-AzContext)
        if ($subscription.Subscription.Id -eq "${{ env.prodSubscriptionId }}") {
          Write-Output "Using subscription $($subscription.subscription.Name)"
          exit 0
          
        }
        else {
          Write-Output "Subscription does not match. Terminating script"
          exit 1
        }


    # Create storage account for SQL logs
    - name: Storage Account for SQL logs
      shell: pwsh
      run: |

        # Set task variables
        $rg = "${{ env.prodRgName }}"
        $templateFile = "$env:GITHUB_WORKSPACE/arm-templates/storageAccount.json"
        $storeAccountName = "${{ env.sqlLogStorageName }}${{ env.envName }}"

        # Deploy shared Storage Account for SQL Logging in prod
        New-AzResourceGroupDeployment `
          -Name "sql-log-${{ env.timestamp }}" `
          -ResourceGroupName $rg `
          -TemplateFile $templateFile `
          -storageAccountName $storeAccountName `
          -accountType Standard_LRS `
          -kind StorageV2 `
          -accessTier hot

          # Set soft delete protection on Storage Account
          $storageAcoount = Get-AzStorageAccount | where-object{$_.StorageAccountName -match "$storeAccountName"}
          $storageAcoount | Enable-AzStorageDeleteRetentionPolicy -RetentionDays 30


    # Create storage account for Azure audit logs
    - name: Storage Account for Audit logs
      shell: pwsh
      run: |

        # Set task variables
        $rg = "${{ env.prodRgName }}"
        $templateFile = "$env:GITHUB_WORKSPACE/arm-templates/storageAccount.json"
        $storeAccountName = "${{ env.auditLogStorageName }}${{ env.envName }}""

        # Deploy Storage Account for Audit logs
        New-AzResourceGroupDeployment `
          -Name "sql-log-${{ env.timestamp }}" `
          -ResourceGroupName $rg `
          -TemplateFile $templateFile `
          -storageAccountName $storeAccountName `
          -accountType Standard_LRS `
          -kind StorageV2 `
          -accessTier cold

          # Set soft delete protection on Storage Account
          $storageAcoount = Get-AzStorageAccount | where-object{$_.StorageAccountName -match "$storeAccountName"}
          $storageAcoount | Enable-AzStorageDeleteRetentionPolicy -RetentionDays 30



    # Azure logout 
    - name: logout
      shell: pwsh
      run: |
        Logout-azAccount