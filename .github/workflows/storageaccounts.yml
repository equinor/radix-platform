name: Storage Accounts
on:
  workflow_dispatch:
    inputs:
      subscription:
        description: 'Subscription'
        type: choice
        required: true
        options:
          - 's940'
          - 's941'
        default: 's941'

      terraformapply:
        description: 'Terraform apply'
        type: boolean
        required: true
        default: false

    secrets:
      AZURE_CLIENT_ID:
        description: The client ID of the Azure AD service principal to use for authenticating to Azure.
        required: true

      AZURE_SUBSCRIPTION_ID:
        description: The ID of the Azure subscription to create the resources in.
        required: true

      AZURE_TENANT_ID:
        description: The ID of the Azure tenant to create the resources in.
        required: true

env:
  container_name: infrastructure

jobs:
  GetEnvironment:
    name: GetEnvironments
    runs-on: ubuntu-latest

    outputs:
      radix_environment: ${{ steps.set-matrix.outputs.radix_environment }}

    steps:
      - uses: actions/checkout@v3
      - id: set-matrix
        name: Get radix environment
        run: echo "radix_environment=$(ls ./terraform/${{ env.container_name }}/${{ inputs.subscription }} | jq -R -s -c 'split("\n")[:-1]')" >> $GITHUB_OUTPUT

  StorageAccounts:
    needs: GetEnvironment
    name: StorageAccounts
    runs-on: ubuntu-latest
    environment: ${{ inputs.subscription }}
    strategy:
      matrix:
        radix_environment: ${{ fromJson(needs.GetEnvironment.outputs.radix_environment) }}

    # Set permissions required to login to Azure using OIDC.
    permissions:
      id-token: write
      contents: read

    defaults:
      run:
        shell: bash
        working-directory: ./terraform/${{ env.container_name }}/${{ inputs.subscription }}/${{ matrix.radix_environment }}/${{ env.path }}

    # Configure OIDC authentication to Azure using environment variables.
    # Required by the AzureRM backend and provider.
    env:
      terraform_version: ~1.3.0
      ARM_USE_OIDC: true
      ARM_USE_AZUREAD: true
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      resource_group_name: ${{ inputs.subscription }}-tfstate
      storage_account_name: ${{ inputs.subscription }}radixinfra
      path: storageaccounts
      key: terraform.tfstate

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: 'Az login'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Get GitHub Public IP
        id: github_public_ip
        run: echo "ipv4=$(curl 'https://ifconfig.me/ip')" >> $GITHUB_OUTPUT

      - name: Add GitHub IP to StorageAccount
        run: |
          az storage account network-rule add \
            --resource-group "${{ env.resource_group_name }}" \
            --account-name "${{ env.storage_account_name }}" \
            --ip-address ${{ steps.github_public_ip.outputs.ipv4 }} >/dev/null

      - name: Lets sleep for 30 seconds for FW rule to complete
        run: sleep 30s

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.terraform_version }}

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config='container_name=${{ env.container_name }}' \
            -backend-config='key=${{ env.path }}/${{ env.key }}' \
            -backend-config='resource_group_name=${{ env.resource_group_name }}' \
            -backend-config='storage_account_name=${{ env.storage_account_name }}'

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        if: inputs.terraformapply == false
        run: |
          terraform plan \
            --var-file=../../../../radix-zone/radix_zone_${{ matrix.radix_environment }}.tfvars \
            -lock=false

      - name: Terraform Apply
        if: (inputs.terraformapply && github.ref == 'refs/heads/master')
        run: |
          terraform apply \
            --var-file=../../../../radix-zone/radix_zone_${{ matrix.radix_environment }}.tfvars \
            -auto-approve \
            -lock=false

      - name: Revoke GitHub IP on StorageAccount
        run: |
          az storage account network-rule remove \
            --resource-group "${{ env.resource_group_name }}" \
            --account-name "${{ env.storage_account_name }}" \
            --ip-address ${{ steps.github_public_ip.outputs.ipv4 }} >/dev/null
