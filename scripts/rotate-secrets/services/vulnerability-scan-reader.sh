#!/usr/bin/env bash
red=$'\e[1;31m'
grn=$'\e[1;32m'
yel=$'\e[1;33m'
normal=$(tput sgr0)

#######################################################################################
### PURPOSE
###

# Rotates secret for radix-vulnerability-scanner's reader user in a radix cluster

#######################################################################################
### PRECONDITIONS
###

# - AKS cluster is available
# - User has role cluster-admin

#######################################################################################
### INPUTS
###

# Required:
# - RADIX_ZONE_ENV               : Path to *.env file
# - CLUSTER_NAME                 : Ex: "test-2", "weekly-93"

# Optional:
# - UPDATE_SECRETS               : Rotate expired secrets. Defaults to false.
# - USER_PROMPT                  : Is human interaction required to run script? true/false. Default is true.

#######################################################################################
### HOW TO USE
###

# NORMAL
# RADIX_ZONE_ENV=../../radix-zone/radix_zone_dev.env CLUSTER_NAME=weekly-07 UPDATE_SECRETS=false ./vulnerability-scan-writer.sh

#######################################################################################
### START
###

echo ""
printf "Start rotating secrets for radix-vulnerability-scanner reader... \n"

#######################################################################################
### Check for prerequisites binaries
###

printf "Check for neccesary executables... "
hash az 2>/dev/null || {
    echo -e "ERROR: Azure-CLI not found in PATH. Exiting..." >&2
    exit 1
}
hash kubectl 2>/dev/null || {
    echo -e "ERROR: kubectl not found in PATH. Exiting..." >&2
    exit 1
}
hash flux 2>/dev/null || {
    echo -e "ERROR: flux not found in PATH. Exiting..." >&2
    exit 1
}
hash jq 2>/dev/null || {
    echo -e "ERROR: jq not found in PATH. Exiting..." >&2
    exit 1
}
hash sqlcmd 2>/dev/null || {
    echo -e "ERROR: sqlcmd not found in PATH. Exiting..." >&2
    exit 1
}
# https://learn.microsoft.com/en-us/sql/tools/sqlcmd/sqlcmd-utility?view=sql-server-ver16&tabs=go%2Clinux&pivots=cs1-bash#find-out-which-version-you-have-installed
if [[ "$(sqlcmd --version)" = *"SQL Server Command Line Tool"* ]]; then
    echo -e "ERROR: sqlcmd is old ODBC variant. Go variant is required." >&2
    echo -e "https://learn.microsoft.com/en-us/sql/tools/sqlcmd/sqlcmd-utility?view=sql-server-ver16&tabs=go%2Clinux&pivots=cs1-bash#download-and-install-sqlcmd" >&2
    echo -e "Exiting..." >&2
    exit 1
fi
printf "Done.\n"

#######################################################################################
### Set default values for optional input
###
USER_PROMPT=${USER_PROMPT:=true}
UPDATE_SECRETS=${UPDATE_SECRETS:=false}

#######################################################################################
### Read inputs and configs
###

# Required inputs

if [[ -z "$RADIX_ZONE_ENV" ]]; then
    echo "ERROR: Please provide RADIX_ZONE_ENV" >&2
    exit 1
else
    if [[ ! -f "$RADIX_ZONE_ENV" ]]; then
        echo "ERROR: RADIX_ZONE_ENV=$RADIX_ZONE_ENV is invalid, the file does not exist." >&2
        exit 1
    fi
    source "$RADIX_ZONE_ENV"
fi

if [[ -z "$CLUSTER_NAME" ]]; then
    echo "ERROR: Please provide CLUSTER_NAME" >&2
    exit 1
fi

if [[ -z "$CLUSTER_NAME" ]]; then
    echo "ERROR: Please provide CLUSTER_NAME" >&2
    exit 1
fi

KEY_VAULT="radix-keyv-${RADIX_ZONE}"
if [[ "${RADIX_ZONE}" == "prod" ]]; then
  KEY_VAULT="radix-keyv-platform"
fi;

case $UPDATE_SECRETS in
    true|false) ;;
    *)
        echo "ERROR: UPDATE_SECRETS must be true or false, is '$UPDATE_SECRETS'" >&2
        exit 1
        ;;
esac

# Source util scripts

source ${RADIX_PLATFORM_REPOSITORY_PATH}/scripts/utility/util.sh

# Load dependencies
LIB_AZURE_SQL_FIREWALL_PATH="${RADIX_PLATFORM_REPOSITORY_PATH}/scripts/azure-sql/lib_firewall.sh"
if [[ ! -f "$LIB_AZURE_SQL_FIREWALL_PATH" ]]; then
   echo "ERROR: The dependency LIB_AZURE_SQL_FIREWALL_PATH=$LIB_AZURE_SQL_FIREWALL_PATH is invalid, the file does not exist." >&2
   exit 1
else
   source "$LIB_AZURE_SQL_FIREWALL_PATH"
fi
LIB_AZURE_KEY_VAULT_PATH="${RADIX_PLATFORM_REPOSITORY_PATH}/scripts/rotate-secrets/lib_keyvault.sh"
if [[ ! -f "$LIB_AZURE_KEY_VAULT_PATH" ]]; then
   echo "ERROR: The dependency LIB_AZURE_KEY_VAULT_PATH=LIB_AZURE_KEY_VAULT_PATH is invalid, the file does not exist." >&2
   exit 1
else
   source "$LIB_AZURE_KEY_VAULT_PATH"
fi

LIB_AZURE_SQL_SECURITY_PATH="${RADIX_PLATFORM_REPOSITORY_PATH}/scripts/azure-sql/lib_security.sh"
if [[ ! -f "$LIB_AZURE_SQL_SECURITY_PATH" ]]; then
   echo "ERROR: The dependency LIB_AZURE_SQL_SECURITY_PATH=$LIB_AZURE_SQL_SECURITY_PATH is invalid, the file does not exist." >&2
   exit 1
else
   source "$LIB_AZURE_SQL_SECURITY_PATH"
fi

#######################################################################################
### Prepare az session
###

printf "Logging you in to Azure if not already logged in... "
az account show >/dev/null || az login >/dev/null
az account set --subscription "$AZ_SUBSCRIPTION_ID" >/dev/null
printf "Done.\n"

script_dir_path="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

#######################################################################################
### Ask user to verify inputs and az login
###

echo -e ""
echo -e "Bootstrap Radix Vulnerability Scanner with the following configuration:"
echo -e ""
echo -e "   > WHERE:"
echo -e "   ------------------------------------------------------------------"
echo -e "   -  RADIX_ZONE                           : $RADIX_ZONE"
echo -e "   -  CLUSTER_NAME                         : $CLUSTER_NAME"
echo -e "   -  KEY_VAULT                            : $KEY_VAULT"
echo -e "   -  VULNERABILITY_SCAN_SQL_SERVER_NAME   : $VULNERABILITY_SCAN_SQL_SERVER_NAME"
echo -e "   -  VULNERABILITY_SCAN_SQL_DATABASE_NAME : $VULNERABILITY_SCAN_SQL_DATABASE_NAME"
echo -e ""
echo -e "   > WHAT:"
echo -e "   ------------------------------------------------------------------"
echo -e "   -  UPDATE_SECRETS                       :  $UPDATE_SECRETS"
echo -e "   -  SECRET                               :  $KV_SECRET_VULNERABILITY_SCAN_DB_API"
echo -e ""
echo -e "   > WHO:"
echo -e "   -------------------------------------------------------------------"
echo -e "   -  AZ_SUBSCRIPTION                      : $(az account show --query name -otsv)"
echo -e "   -  AZ_USER                              : $(az account show --query user.name -o tsv)"
echo -e ""

echo ""

if [[ $USER_PROMPT == true ]]; then
    while true; do
        read -p "Is this correct? (Y/n) " yn
        case $yn in
            [Yy]* ) break;;
            [Nn]* ) echo ""; echo "Quitting."; exit 1;;
            * ) echo "Please answer yes or no.";;
        esac
    done
fi

secretShouldUpdate=false

#######################################################################################
### Control Secret
###


secretExists=$(keyvault_secret_exist ${KEY_VAULT} ${KV_SECRET_VULNERABILITY_SCAN_DB_API})

if [ $secretExists -eq 1 ]; then
  secretShouldUpdate=true
  printf "%sSecret %s missing, should be created%s\n" ${yel} ${KV_SECRET_VULNERABILITY_SCAN_DB_API} ${normal}
elif [ $secretExists -eq 0 ]; then
  expiry=$(keyvault_secret_ttl_days ${KEY_VAULT} ${KV_SECRET_VULNERABILITY_SCAN_DB_API})
  if [ $expiry -le 310 ]; then
    secretShouldUpdate=true
    printf "%sSecret %s expires in %s days, should be updated %s \n" ${yel} ${KV_SECRET_VULNERABILITY_SCAN_DB_API} ${expiry} ${normal}
  fi;
else
  printf "Unknown response from secret exists: %s\n" $secretExists
  exit 2
fi;


if [ $secretShouldUpdate == "false" ]; then
  printf "No outdated secrets.\n"
  exit 0
fi;

if [ $UPDATE_SECRETS == "false" ]; then
  printf "Secrets should be updated Run with UPDATE_SECRETS=true to update.\n"
  exit 1
fi;

#######################################################################################
### CLUSTER?
###

printf "Connecting kubectl..."
get_credentials "$AZ_RESOURCE_GROUP_CLUSTERS" "$CLUSTER_NAME"
kubectl_context="$(kubectl config current-context)"
if [ "$kubectl_context" = "$CLUSTER_NAME" ] || [ "$kubectl_context" = "${CLUSTER_NAME}" ]; then
    echo "kubectl is ready..."
else
    echo "Please set your kubectl current-context to be $CLUSTER_NAME"
    exit 1
fi

#######################################################################################
### Verify cluster access
###
verify_cluster_access

printf "Generating password... "
password=$(head -c 32 /dev/urandom | base64 --wrap 0) ||
    { echo "ERROR: Could not generate password." >&2; exit 1; }
printf "Done.\n"

printf "Saving password to %s... " ${KEY_VAULT}
keyvault_secret_save ${KEY_VAULT} ${KV_SECRET_VULNERABILITY_SCAN_DB_API} ${password} || exit 1
printf "Done.\n"

printf "\n#### Updating SQL Server with new password"

printf "Whitelist IP in firewall rule for SQL Server... "
whitelistRuleName="ClientIpAddress_$(date +%Y%m%d%H%M%S)"

add_local_computer_sql_firewall_rule \
    $VULNERABILITY_SCAN_SQL_SERVER_NAME \
    $AZ_RESOURCE_GROUP_VULNERABILITY_SCAN_SQL \
    $whitelistRuleName \
    || { echo "ERROR: Could not add IP to firewall." >&2; exit 1; }
printf "Done.\n"

printf "Creating/updating SQL user for Radix Vulnerability Scanner... "
create_or_update_sql_user \
    $VULNERABILITY_SCAN_SQL_SERVER_FQDN \
    $VULNERABILITY_SCAN_SQL_DATABASE_NAME \
    $VULNERABILITY_SCAN_SQL_SCANNER_USER \
    $SCANNER_SQL_PASSWORD \
    "radixreader"

printf "Remove IP in firewall rule for SQL Server... "
delete_sql_firewall_rule \
    $VULNERABILITY_SCAN_SQL_SERVER_NAME \
    $AZ_RESOURCE_GROUP_VULNERABILITY_SCAN_SQL \
    $whitelistRuleName \
    || exit
printf "Done.\n"
