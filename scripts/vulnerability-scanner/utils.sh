#!/usr/bin/env bash


# upsert_password_secret generates a new cryptographically random secret/password
# and stores it in a Azure Key Vault secret
#
# Parameters:
# - Key vault name. Required
# - Secret name in Key Vault. Required
# - Overwrite if exist. Optional, true/false, default false
generate_password_and_store() {
    local keyvault=$1
    local secretName=$2
    local overwrite=$3

    if [[ -z "$keyvault" ]]; then
        >&2 printf "${red}Missing parameter #1 - key vault name.\n"
        exit 1
    fi

    if [[ -z "$secretName" ]]; then
        >&2 printf "${red}Missing parameter #2 - secret name.\n"
        exit 1
    fi

    case $overwrite in
        true|false) ;;
        *)
            >&2 printf "${red}Invalid value for parameter #3 - overwrite - must be true or false.\n"
            exit 1
            ;;
    esac

    printf "Checking access to secret '$secretName' in '$keyvault'.\n"
    az keyvault secret show --vault-name $keyvault --name $secretName 1> /dev/null 2> error.txt
    status=$?

    if [[ $status -eq 0 && $overwrite == false ]]; then
        printf "Secret '${secretName}' in '${keyvault}' exists, skipping update.\n"
        exit
    fi

    # az cli returns exit code 3 when secret does not exist.
    # If exit code is not 3 then something else went wrong (e.g. auth or invalid secret name) and we stop the script
    if [[ $status -gt 0 && $status -ne 3 ]]; then
        >&2 printf "${red}$(cat error.txt)\n"
        rm -f error.txt
        exit 1
    fi

    rm -f error.txt 

    local password=$(python3 -c 'import os,base64; print(base64.urlsafe_b64encode(os.urandom(32)).decode())') || exit

    az keyvault secret set --vault-name $keyvault --name $secretName --value $password > /dev/null || exit

    printf "Successfully updated secret '${secretName}' in '${keyvault}'.\n"

}