#!/usr/bin/env bash

#######################################################################################
### PURPOSE
###

# Bootstrap radix-vulnerability-scanner in a radix cluster

#######################################################################################
### PRECONDITIONS
###

# - AKS cluster is available
# - User has role cluster-admin

#######################################################################################
### INPUTS
###

# Required:
# - RADIX_ZONE_ENV               : Path to *.env file
# - CLUSTER_NAME                 : Ex: "test-2", "weekly-93"

# Optional:
# - USER_PROMPT                  : Is human interaction required to run script? true/false. Default is true.
# - REGENERATE_SCANNER_PASSWORD  : Should existing password for scanner be regenerated and stored in KV? true/false. default is false
# - REGENERATE_API_PASSWORD      : Should existing password for scanner be regenerated and stored in KV? true/false. default is false

#######################################################################################
### HOW TO USE
###

# NORMAL
# RADIX_ZONE_ENV=../radix-zone/radix_zone_dev.env CLUSTER_NAME="weekly-2" ./bootstrap.sh

#######################################################################################
### START
###

echo ""
echo "Start bootstrap of radix-vulnerability-scanner... "

#######################################################################################
### Check for prerequisites binaries
###

echo ""
printf "Check for neccesary executables... "
hash az 2>/dev/null || {
    echo -e "\nError: Azure-CLI not found in PATH. Exiting..."
    exit 1
}
hash kubectl 2>/dev/null || {
    echo -e "\nError: kubectl not found in PATH. Exiting..."
    exit 1
}
hash jq 2>/dev/null || {
    echo -e "\nError: jq not found in PATH. Exiting..."
    exit 1
}
hash sqlcmd 2>/dev/null || {
    echo -e "\nError: sqlcmd not found in PATH. Exiting... " >&2
    exit 1
}
printf "All is good."
echo ""

#######################################################################################
### Set default values for optional input
###

USER_PROMPT=${USER_PROMPT:=true}

REGENERATE_SCANNER_PASSWORD=${REGENERATE_SCANNER_PASSWORD:-false}

REGENERATE_API_PASSWORD=${REGENERATE_API_PASSWORD:-false}

#######################################################################################
### Read inputs and configs
###

# Required inputs

if [[ -z "$RADIX_ZONE_ENV" ]]; then
    echo "Please provide RADIX_ZONE_ENV" >&2
    exit 1
else
    if [[ ! -f "$RADIX_ZONE_ENV" ]]; then
        echo "RADIX_ZONE_ENV=$RADIX_ZONE_ENV is invalid, the file does not exist." >&2
        exit 1
    fi
    source "$RADIX_ZONE_ENV"
fi

if [[ -z "$CLUSTER_NAME" ]]; then
    echo "Please provide CLUSTER_NAME" >&2
    exit 1
fi

case $REGENERATE_SCANNER_PASSWORD in
    true|false) ;;
    *)
        echo 'REGENERATE_SCANNER_PASSWORD must be true or false' >&2
        exit 1
        ;;
esac

case $REGENERATE_API_PASSWORD in
    true|false) ;;
    *)
        echo 'REGENERATE_API_PASSWORD must be true or false' >&2
        exit 1
        ;;
esac

#######################################################################################
### Prepare az session
###

printf "Logging you in to Azure if not already logged in... "
az account show >/dev/null || az login >/dev/null
az account set --subscription "$AZ_SUBSCRIPTION_ID" >/dev/null
printf "Done.\n"

#######################################################################################
### Ask user to verify inputs and az login
###

echo -e ""
echo -e "Bootstrap Radix Vulnerability Scanner and API with the following configuration:"
echo -e ""
echo -e "   > WHERE:"
echo -e "   ------------------------------------------------------------------"
echo -e "   -  AZ_RESOURCE_KEYVAULT             : $AZ_RESOURCE_KEYVAULT"
echo -e "   -  CLUSTER_NAME                     : $CLUSTER_NAME"
echo -e ""
echo -e "   > WHAT:"
echo -e "   ------------------------------------------------------------------"
echo -e "   -  REGENERATE_SCANNER_PASSWORD      : $REGENERATE_SCANNER_PASSWORD"
echo -e "   -  REGENERATE_API_PASSWORD          : $REGENERATE_API_PASSWORD"
echo -e ""
echo -e "   > WHO:"
echo -e "   -------------------------------------------------------------------"
echo -e "   -  AZ_SUBSCRIPTION                  : $(az account show --query name -otsv)"
echo -e "   -  AZ_USER                          : $(az account show --query user.name -o tsv)"
echo -e ""

if [[ $USER_PROMPT == true ]]; then
    while true; do
        read -p "Is this correct? (Y/n) " yn
        case $yn in
            [Yy]* ) echo ""; break;;
            [Nn]* ) echo ""; echo "Quitting."; exit 1;;
            * ) echo "Please answer yes or no.";;
        esac
    done
fi

#######################################################################################
### CLUSTER?
###

kubectl_context="$(kubectl config current-context)"

if [ "$kubectl_context" = "$CLUSTER_NAME" ] || [ "$kubectl_context" = "${CLUSTER_NAME}-admin" ]; then
    echo "kubectl is ready..."
else
    echo "Please set your kubectl current-context to be $CLUSTER_NAME"
    exit 1
fi

#######################################################################################
### Verify cluster access
###
printf "Verifying cluster access..."
if [[ $(kubectl cluster-info 2>&1) == *"Unable to connect to the server"* ]]; then
    printf "ERROR: Could not access cluster. Quitting...\n"
    exit 1
fi
printf " OK\n"

echo "Install Radix Vulnerability Scanner resources for flux"

az keyvault secret download \
    --vault-name "$AZ_RESOURCE_KEYVAULT" \
    --name "${AZ_SYSTEM_USER_CONTAINER_REGISTRY_READER}" \
    --file acr_sp_credentials.json

source functions.sh
generate_password_and_store $AZ_RESOURCE_KEYVAULT $KV_SECRET_VULNERABILITY_SCAN_DB_WRITER $REGENERATE_SCANNER_PASSWORD || exit
SQL_DB_PASSWORD=$(az keyvault secret show --vault-name "$AZ_RESOURCE_KEYVAULT" --name $KV_SECRET_VULNERABILITY_SCAN_DB_WRITER | jq -r .value)

SNYK_SA_TOKEN=$(az keyvault secret show --vault-name "$AZ_RESOURCE_KEYVAULT" --name radix-snyk-sa-access-token-$RADIX_ZONE | jq -r .value)

echo "sql:                                                                                                                           
  password: ${SQL_DB_PASSWORD}
dockerAuths:
  - registry: ${AZ_RESOURCE_CONTAINER_REGISTRY}.azurecr.io
    username: $(jq -r '.id' acr_sp_credentials.json)
    password: $(jq -r '.password' acr_sp_credentials.json)
snykToken: ${SNYK_SA_TOKEN}" > vulnerability-scanner-chart-values.yaml

kubectl create ns radix-vulnerability-scanner --dry-run=client --save-config -o yaml |
    kubectl apply -f -
    
kubectl create secret generic vulnerability-scanner-chart-values --namespace radix-vulnerability-scanner \
    --from-file=./vulnerability-scanner-chart-values.yaml \
    --dry-run=client -o yaml |
    kubectl apply -f -

rm -f vulnerability-scanner-chart-values.yaml
rm -f acr_sp_credentials.json
echo "Done."