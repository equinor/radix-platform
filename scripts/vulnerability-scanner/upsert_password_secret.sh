#!/usr/bin/env bash

red="\033[0;31m"

#######################################################################################
### PURPOSE
###

# Create or update a KeyVault secret with a randomly generated password

#######################################################################################
### PRECONDITIONS
###

# - User can create or update secrets in KeyVault

#######################################################################################
### INPUTS
###

# Required:
# - RADIX_ZONE_ENV      : Path to *.env file
# - SECRET_NAME         : Ex: "my-resource-password"

# Optional:
# - UPDATE_IF_EXIST     : Should existing secret be updated with new password? true/false. default is false
# - USER_PROMPT         : Is human interaction required to run script? true/false. Default is true.

#######################################################################################
### HOW TO USE
###

# Create secret with random password. Do not update if secret exist
# RADIX_ZONE_ENV=../radix-zone/radix_zone_dev.env SECRET_NAME="my_password" ./upsert_password_secret.sh

# Create or update secret with random password
# RADIX_ZONE_ENV=../radix-zone/radix_zone_dev.env SECRET_NAME="my_password" UPDATE_IF_EXIST=true ./upsert_password_secret.sh

#######################################################################################
### START
###

printf "Check for neccesary executables... "
hash az 2>/dev/null || {
    echo -e "\nError: Azure-CLI not found in PATH. Exiting... " >&2
    exit 1
}

hash python3 2>/dev/null || {
    echo -e "\nError: python3 not found in PATH. Exiting... " >&2
    exit 1
}

hash sqlcmd 2>/dev/null || {
    echo -e "\nError: sqlcmd not found in PATH. Exiting... " >&2
    exit 1
}


#######################################################################################
### Set default values for optional input
###

USER_PROMPT=${USER_PROMPT:=true}

UPDATE_IF_EXIST=${UPDATE_IF_EXIST:-false}

# Required inputs
if [[ -z "$RADIX_ZONE_ENV" ]]; then
    echo "Please provide RADIX_ZONE_ENV" >&2
    exit 1
else
    if [[ ! -f "$RADIX_ZONE_ENV" ]]; then
        echo "RADIX_ZONE_ENV=$RADIX_ZONE_ENV is invalid, the file does not exist." >&2
        exit 1
    fi
    source "$RADIX_ZONE_ENV"
fi

if [[ -z "$SECRET_NAME" ]]; then
    echo "Please provide SECRET_NAME" >&2
    exit 1
fi

case $UPDATE_IF_EXIST in
    true|false) ;;
    *)
        echo 'UPDATE_IF_EXIST must be true or false'
        exit 1
        ;;
esac


#######################################################################################
### Prepare az session
###

printf "Logging you in to Azure if not already logged in... "
az account show >/dev/null || az login >/dev/null
az account set --subscription "$AZ_SUBSCRIPTION_ID" >/dev/null
printf "Done.\n"

#######################################################################################
### Ask user to verify inputs and az login
###

echo -e ""
echo -e "Create/update keyvault password secret with the following configuration:"
echo -e ""
echo -e "   > WHERE:"
echo -e "   ------------------------------------------------------------------"
echo -e "   -  AZ_RESOURCE_KEYVAULT             : $AZ_RESOURCE_KEYVAULT"
echo -e "   -  SECRET_NAME                      : $SECRET_NAME"
echo -e "   -  UPDATE_IF_EXIST                  : $UPDATE_IF_EXIST"
echo -e ""
echo -e "   > WHO:"
echo -e "   -------------------------------------------------------------------"
echo -e "   -  AZ_SUBSCRIPTION                  : $(az account show --query name -otsv)"
echo -e "   -  AZ_USER                          : $(az account show --query user.name -o tsv)"
echo -e ""

if [[ $USER_PROMPT == true ]]; then
    while true; do
        read -p "Is this correct? (Y/n) " yn
        case $yn in
            [Yy]* ) echo ""; break;;
            [Nn]* ) echo ""; echo "Quitting."; exit 1;;
            * ) echo "Please answer yes or no.";;
        esac
    done
fi

### Generate new password and store

# echo 'Checking access and existance of secret'
# az keyvault secret show --vault-name $AZ_RESOURCE_KEYVAULT --name $SECRET_NAME 1> /dev/null 2> error.txt
# status=$?

# if [[ $status -eq 0 && $UPDATE_IF_EXIST == false ]]; then
#     printf "Secret exists, skipping update.\n"
#     exit
# fi

# # az cli returns exit code 3 when secret does not exist.
# # If exit code is not 3 then something else went wrong (e.g. auth or invalid secret name) and we stop the script
# if [[ $status -gt 0 && $status -ne 3 ]]; then
#      >&2 printf "${red}$(cat error.txt)\n"
#      rm -f error.txt
#      exit 1
# fi

# # Do not set secret if it exists and UPDATE_IF_EXIST=false
# if [[ $status -eq 0 && $UPDATE_IF_EXIST == false ]]; then
#     printf 'Secret exists, skipping update.\n'
#     exit
# fi

# PASSWORD=$(python3 -c 'import os,base64; print(base64.urlsafe_b64encode(os.urandom(32)).decode())') || exit

# az keyvault secret set --vault-name $AZ_RESOURCE_KEYVAULT --name $SECRET_NAME --value $PASSWORD > /dev/null || exit

source ./utils.sh

generate_password_and_store $AZ_RESOURCE_KEYVAULT $SECRET_NAME $UPDATE_IF_EXIST || exit

# rm -f error.txt 

# printf "Secret ${SECRET_NAME} set successfully.\n"

