#!/usr/bin/env bash

#######################################################################################
### PURPOSE
###

# Configures the secrets for radix vulnerability scanner API on the cluster given the context.

#######################################################################################
### INPUTS
###

# Required:
# - RADIX_ZONE_ENV      : Path to *.env file
# - CLUSTER_NAME        : Ex: "test-2", "weekly-93"

#######################################################################################
### HOW TO USE
###

# Example 1:
# RADIX_ZONE_ENV=./radix-zone/radix_zone_dev.env CLUSTER_NAME=weekly-2 ./update_secret_for_vulnerability_scanner_api.sh

# Example 2: Using a subshell to avoid polluting parent shell
# (RADIX_ZONE_ENV=./radix-zone/radix_zone_dev.env CLUSTER_NAME=weekly-2 ./update_secret_for_vulnerability_scanner_api.sh)

#######################################################################################
### START
###

echo ""
echo "Updating secret for the radix vulnerability scanner API"

# Validate mandatory input

if [[ -z "$RADIX_ZONE_ENV" ]]; then
    echo "ERROR: Please provide RADIX_ZONE_ENV" >&2
    exit 1
else
    if [[ ! -f "$RADIX_ZONE_ENV" ]]; then
        echo "ERROR_ RADIX_ZONE_ENV=$RADIX_ZONE_ENV is invalid, the file does not exist." >&2
        exit 1
    fi
    source "$RADIX_ZONE_ENV"
fi

if [[ -z "$CLUSTER_NAME" ]]; then
    echo "ERROR: Please provide CLUSTER_NAME" >&2
    exit 1
fi

# Source util scripts

source ${RADIX_PLATFORM_REPOSITORY_PATH}/scripts/utility/util.sh

#######################################################################################
### Prepare az session
###

printf "Logging you in to Azure if not already logged in... "
az account show >/dev/null || az login >/dev/null
az account set --subscription "$AZ_SUBSCRIPTION_ID" >/dev/null
printf "Done.\n"

#######################################################################################
### Connect kubectl
###

# Exit if cluster does not exist
printf "Connecting kubectl..."
get_credentials "$AZ_RESOURCE_GROUP_CLUSTERS" "$CLUSTER_NAME" || {
    # Send message to stderr
    echo -e "ERROR: Cluster \"$CLUSTER_NAME\" not found." >&2
    exit 0
}
printf "...Done.\n"

#######################################################################################
### Verify cluster access
###
verify_cluster_access

function updateSecret() {
    VULNERABILITY_API_SQL_LOGIN_PASSWORD=$(az keyvault secret show -n $KV_SECRET_VULNERABILITY_SCAN_DB_API --vault-name $AZ_RESOURCE_KEYVAULT | jq -r '.value')
    if [[ -z $VULNERABILITY_API_SQL_LOGIN_PASSWORD ]]; then
        echo "ERROR: Could not find secret $KV_SECRET_VULNERABILITY_SCAN_DB_API in keyvault. Quitting.." >&2
        return 1
    fi

    echo "SQL_SERVER=$VULNERABILITY_SCAN_SQL_SERVER_FQDN
    SQL_DATABASE=$VULNERABILITY_SCAN_SQL_DATABASE_NAME
    SQL_USER=$VULNERABILITY_SCAN_SQL_API_USER
    SQL_PASSWORD=$VULNERABILITY_API_SQL_LOGIN_PASSWORD
    " > radix-vulnerability-scanner-api-secrets.env

    VULNERABILITY_SCANNER_API_SECRET_NAME_QA=$(kubectl get secret --namespace "radix-vulnerability-scanner-api-qa" --selector radix-component="server" -ojson | jq -r .items[0].metadata.name)

    if [[ -z "$VULNERABILITY_SCANNER_API_SECRET_NAME_QA" ]]; then
        echo "ERROR: Could not get secret for server component in radix-vulnerability-scanner-api-qa." >&2
    else
        kubectl create secret generic "$VULNERABILITY_SCANNER_API_SECRET_NAME_QA" --namespace radix-vulnerability-scanner-api-qa \
            --from-env-file=./radix-vulnerability-scanner-api-secrets.env \
            --dry-run=client -o yaml |
            kubectl apply -f -
    fi

    VULNERABILITY_SCANNER_API_SECRET_NAME_PROD=$(kubectl get secret --namespace "radix-vulnerability-scanner-api-prod" --selector radix-component="server" -ojson | jq -r .items[0].metadata.name)

    if [[ -z "$VULNERABILITY_SCANNER_API_SECRET_NAME_PROD" ]]; then
        echo "ERROR: Could not get secret for server component in radix-vulnerability-scanner-api-prod." >&2
    else
        kubectl create secret generic "$VULNERABILITY_SCANNER_API_SECRET_NAME_PROD" --namespace radix-vulnerability-scanner-api-prod \
            --from-env-file=./radix-vulnerability-scanner-api-secrets.env \
            --dry-run=client -o yaml |
            kubectl apply -f -
    fi

    rm radix-vulnerability-scanner-api-secrets.env
    echo "Restarting radix-vulnerability-scanner-api... "
    kubectl rollout restart deployment -n radix-vulnerability-scanner-api-qa
    kubectl rollout restart deployment -n radix-vulnerability-scanner-api-prod
    echo "Secret updated"
}

### MAIN
updateSecret
