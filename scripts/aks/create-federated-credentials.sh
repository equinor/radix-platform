#!/usr/bin/env bash
# Add new Managed identity federated credentials for new cluster to all service principals (both applications and managed identities, available for the user
# ISSUER_URL=<issuer-url> CONTEXT=<platform|playground|development> ./create-federated-credentials.sh
#
# It is required to have the following utils installed:
# - az https://learn.microsoft.com/en-us/cli/azure/install-azure-cli
# - jq https://stedolan.github.io/jq/download/
# - curl https://everything.curl.dev/get
#
# Get a cluster issuer URL:
# az aks show --resource-group clusters --name <cluster-name> --query oidcIssuerProfile.issuerUrl

# Equinor tenant id
tenant="3aa4a235-b6e2-48d5-9195-7fcf05b459b0"
apiUrlContextPart="" # default - platform
case "${CONTEXT}" in
  "playground")
    apiUrlContextPart="playground."
    ;;
  "development")
    apiUrlContextPart="dev."
    ;;
  *)
    apiUrlContextPart=""
    ;;
esac
apiUrl="https://api.${apiUrlContextPart}radix.equinor.com/api/v1"

if [[ -z "${ISSUER_URL}" ]]; then
  printf "ERROR: ISSUER_URL is not set.\n" >&2
  exit 1
fi

echo "Get an access token"
token=$(az account get-access-token --resource 6dae42f8-4368-4678-94ff-3960e28e3630|jq -r .accessToken)
if [[ -z "${token}" ]]; then
  printf "ERROR: Could not get access token.\n" >&2
  exit 1
fi

echo "get available Radix applications"
appNames=$(curl -X GET \
  "${apiUrl}/applications" \
  -H "Authorization: Bearer ${token}" \
  -H "Content-Type: application/json" \
  -H "cache-control: no-cache" 2>/dev/null|jq -r '.[].name')
if [[ -z "${appNames}" ]]; then
  printf "ERROR: Could not get applications.\n" >&2
  exit 1
fi

#Get identities for each application
for appName in $appNames
do
  envNames=$(curl -X GET \
          "${apiUrl}/applications/${appName}/environments" \
          -H "Authorization: Bearer ${token}" \
          -H "Content-Type: application/json"  2>/dev/null|jq -r '.[].name')
  if [[ -z "$envNames" ]]; then
    echo "no environments found for an application: $appName"
    continue
  fi

  echo "found environments found for an application: $appName"
  for envName in $envNames
    do
      identityPropList=($(curl -X GET \
          "${apiUrl}/applications/${appName}/environments/${envName}" \
          -H "Authorization: Bearer ${token}" \
          -H "Content-Type: application/json" 2>/dev/null | \
          jq -r '.activeDeployment as $d|select($d != null)|select($d.components != null)|$d.components[] as $c|select($c.identity != null)|select($c.identity.azure != null)|{namespace:$d.namespace,componentName:$c.name,clientId:$c.identity.azure.clientId}'|jq -c '.'))

      if [[ -z "$identityPropList" ]]; then
        echo "- no Azure identities for env: $envName"
        continue
      fi

      echo "- found Azure identities for env: $envName"
      for identityProps in "${identityPropList[@]}"
      do
        namespace=$(echo "$identityProps"|jq -r .namespace)
        componentName=$(echo "$identityProps"|jq -r .componentName)
        clientId=$(echo "$identityProps"|jq -r .clientId)

        sps=$(az ad sp list --filter "appId eq '$clientId'" --query "[].{appId:appId,displayName:displayName,objectId:id,type:servicePrincipalType}"|jq -rc '.|select(length > 0)|.[0]')
        if [[ -z "$sps" ]]; then
          echo "  - not found service principal for the clientId $clientId"
          continue
        fi

        displayName=$(echo "$sps"|jq -r .displayName)
        newFedCredName="${namespace}-${componentName}-${ISSUER_URL:(-37):36}"
        newFedCredSubject="system:serviceaccount:${namespace}:${componentName}-sa"
        newFedCredDescription="Generated by script github.com/equinor/radix-platform/scripts/aks/create-federated-credentials.sh on $(date) by $USER"

        if [[ $(echo "$sps"|jq -r '.type') == "Application" ]]; then
          echo "  - application: $displayName, clientId: $clientId, namespace:${namespace}, component:${componentName}"

          fedCreds=$(az ad app federated-credential list --id "$clientId" -o json|jq -r ".[]|select(.issuer|contains(\"azure.com/$tenant/\"))|select(.subject==\"system:serviceaccount:${namespace}:${componentName}-sa\")"|jq -s '.')
          if [[ -z "$fedCreds" ]]; then
            echo "fail to get federated credentials"
            exit 1
          elif [ $(echo "$fedCreds"|jq '. | length') -eq 0 ]; then
            echo "    - no federated credential(s) found"
            continue
          fi

          fedCredsCount=$(echo "$fedCreds"|jq -s ".|length")
          echo "    - found $fedCredsCount federated credential(s)"

          requiredFedCredCount=$(echo "$fedCreds"|jq -r ".[]|select(.issuer|contains(\"$ISSUER_URL\"))"|jq -s ".|length")
          if [ "$requiredFedCredCount" -ne 0 ]; then
            echo "      - found existing federated credential(s) for the required issuer, skip registration"
            continue
          fi

          echo "      - no federated credentials found for the required issuer - register new one"

          result=$(az ad app federated-credential create --id "$clientId" \
            --parameters "{\"audiences\":[\"api://AzureADTokenExchange\"],\"issuer\":\"$ISSUER_URL\",\"name\":\"$newFedCredName\",\"subject\":\"$newFedCredSubject\",\"description\":\"$newFedCredDescription\"}")

          if [ $? -ne 0 ]; then
            echo "      - registration failed"
          else
            echo "      - registered. id: $(echo "$result"|jq -r '.id')"
          fi
          continue
        fi

        if [[ $(echo "$sps"|jq -r '.type') == "ManagedIdentity" ]]; then
          resourceGroup=$(az identity list --query "[?clientId=='$clientId']" -o json|jq -r '.|select(length > 0)|.[0]|.resourceGroup')
          echo "  - managed identity: $displayName, resource group $resourceGroup, clientId: $clientId, namespace:${namespace}, component:${componentName}"

          fedCreds=$(az identity federated-credential list --identity-name "$displayName" --resource-group "$resourceGroup")

          if [[ -z "$fedCreds" ]]; then
            echo "    - fail to get federated credential(s)"
            exit 1
          elif [ $(echo "$fedCreds"|jq '. | length') -eq 0 ]; then
            echo "    - no federated credentials found"
            continue
          fi

          fedCredsCount=$(echo "$fedCreds"|jq -s ".|length")
          echo "    - found $fedCredsCount federated credential(s)"

          requiredFedCredCount=$(echo "$fedCreds"|jq -r ".[]|select(.issuer|contains(\"$ISSUER_URL\"))"|jq -s ".|length")
          if [ "$requiredFedCredCount" -ne 0 ]; then
            echo "      - found existing federated credential(s) for the required issuer, skip registration"
            continue
          fi
          echo "      - no federated credential(s) found for the required issuer - register new one"
          result=$(az identity federated-credential create \
              --identity-name "$displayName" \
              --resource-group "$resourceGroup" \
              --name "$newFedCredName" \
              --subject "$newFedCredSubject" \
              --issuer "$ISSUER_URL" \
              --audiences "api://AzureADTokenExchange")
          if [ $? -ne 0 ]; then
            echo "      - registration failed"
          else
            echo "      - registered. id: $(echo "$result"|jq -r '.id')"
          fi
          continue
        fi

        echo "  - not found application or managed identity for the clientId $clientId"
      done
    done
done

echo "completed"