trigger:
  branches:
    include:
      - devops-workitem-automation
variables:
  System.Debug: true

stages:
  - stage: dev
    jobs:
      - job: checkversion
        pool:
          VmImage: ubuntu-latest
        steps:
        # Updating the python version available on the linux agent
        - task: UsePythonVersion@0
          inputs:
            versionSpec: '3.x'
            architecture: 'x64'

        # Updating pip to latest
        - script: python -m pip install --upgrade pip
          displayName: 'Upgrade pip'

        # Updating to latest Azure CLI version.
        - script: pip install --pre azure-cli --extra-index-url https://azurecliprod.blob.core.windows.net/edge
          displayName: 'upgrade azure cli'

        - script: az extension add -n azure-devops
          displayName: 'Install Azure DevOps Extension'

        - script: echo ${AZURE_DEVOPS_CLI_PAT} | az devops login
          env:
            AZURE_DEVOPS_CLI_PAT: $(System.AccessToken)
          displayName: 'Login Azure DevOps Extension'

        - script: az devops configure --defaults organization=https://dev.azure.com/Equinor project=Radix --use-git-aliases true
          displayName: 'Set default Azure DevOps organization and project'

        # - script: |
        #     az boards work-item create --title CT-TEST-Pipeline-task --type "User Story" -d "testing pipeline for work items"
        #   displayName: 'Show build list and PRs'
        - task: AzurePowerShell@5
          env:
            clientId: ${env:CLIENTID}
            clientSecret: ${env:CLIENTSECRET}
            tenant: ${env:TENANT}
          inputs:
            ScriptType: InlineScript
            azureSubscription: 'Azure - Dev'
            azurePowerShellVersion: LatestVersion
            pwsh: true
            Inline: |
              az login --service-principal --username "$Env:clientId" --password "$Env:clientSecret" --tenant ${env:TENANT}
              get-azcontext
              az devops configure -l
              # Import-Module .\powershell-modules\Check-Helm\Check-Helm.psm1
              # .\scripts\devops\check-component-version.ps1 -RadixEnvironment ".\scripts\radix-zone\radix_zone_dev.json"