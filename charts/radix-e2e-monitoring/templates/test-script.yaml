apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ .Release.Name }}-k6scripts"
  labels:
    app: "radix-platform"
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"

data:

  index.js: |-

      {{ $clusterFQDN := .Values.clusterFQDN }}

      const clusterFQDN = "{{ .Values.clusterFQDN }}"

      const serviceAccountToken = open(`${__ENV.TOKEN_FILE_PATH}`).trim();

      let source

      if(`${__ENV.KUBERNETES_SERVICE_HOST}` == "undefined"){
        source = `${__ENV.NAME}`;
      }else{
        source = `${__ENV.KUBERNETES_SERVICE_HOST}`;
      }
      
      import { check, sleep } from "k6";
      import { Counter, Rate, Trend } from "k6/metrics";
      import http from "k6/http";

      // A test run is a sum of all the tests
      const testsRunsSuccessful = new Counter("test_runs_successful");
      const testsRunsFailed = new Counter("test_runs_failed");

      // A test is an individual test
      const testsSuccessful = new Counter("tests_successful");
      const testsFailed = new Counter("tests_failed");

      export default function() {

          console.log("Starting tests. Setting source to: " + source)

          // Array containing all tests
          let tests = []

          // Object containing one test
          let test = {}
          
          // This block will be templated by Helm
          {{- range .Values.tests }}
          test.expect = {{ .expect }}
          test.service = "{{ .service }}"
          test.endpoint = "https://{{ .service }}.{{ $clusterFQDN }}{{ .endpoint }}"
          test.authenticate = {{ .authenticate }}
          tests.push(JSON.parse(JSON.stringify(test))); // Deep-ish copy
          {{- end }}

          let baseTags = { source: source, cluster: clusterFQDN };

          let testsRunsSuccessfulCounter = 0;
          let testsRunsFailedCounter = 0;

          for (let i = 0; i < tests.length; i++) {
            let testTags = {
              source: source,
              cluster: clusterFQDN,
              name: tests[i].endpoint,
              service: tests[i].service
            };

            let params = { tags: testTags };

            if (tests[i].authenticate == true) {
              params = {
                tags: testTags,
                headers: {
                  "Content-Type": "application/json",
                  Authorization: "Bearer " + serviceAccountToken
                }
              };
            }

            let res = http.get(tests[i].endpoint, params);

            //console.log(JSON.stringify(res, null, 4));

            if (
              check(
                res,
                {
                  "no errors": r => r.error === ""
                },
                testTags
              )
            ) {
            } else {
              console.log(res.error);
              testsRunsFailedCounter++;
              testsFailed.add(1, baseTags);
              continue;
            }

            if (
              check(
                res,
                {
                  "expected HTTP status": r => r.status === tests[i].expect
                },
                testTags
              )
            ) {
            } else {
              console.log(
                tests[i].endpoint +
                  " Unexpected HTTP status, wanted " +
                  tests[i].expect +
                  " but got " +
                  res.status + 
                  ". Body is: " + 
                  res.body
              );
              testsRunsFailedCounter++;
              testsFailed.add(1, baseTags);
              continue;
            }

            testsFailed.add(0, baseTags);
            testsSuccessful.add(1, baseTags);
            testsRunsSuccessfulCounter++;
          }

          testsRunsFailed.add(testsRunsFailedCounter, baseTags);
          testsRunsSuccessful.add(testsRunsSuccessfulCounter, baseTags);

          sleep(5);
        }