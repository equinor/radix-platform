apiVersion: v1
kind: ConfigMap
metadata:
  name: k6scripts

data:

  index.js: |-

      {{ $clusterFQDN := .Values.clusterFQDN }}

      const serviceAccountToken = open(`${__ENV.TOKEN_FILE_PATH}`).trim();

      import { check, sleep } from "k6";
      import { Counter, Rate, Trend } from "k6/metrics";
      import http from "k6/http";

      const criticalPass = new Counter("critical_tests_pass");
      const criticalFail = new Counter("critical_tests_fail");
      const warningPass = new Rate("warning_tests_pass");
      const warningFail = new Rate("warning_tests_fail");

      export let options = {
        thresholds: {
          "critical_tests_fail": ["count<1"],
          "warning_tests_fail": ["rate<0.1"],
        }
      };

      export default function() {

          // Array containing all tests
          let tests = []

          // Object containing one test
          let test = {}
          
          // This block will be templated by Helm
          {{- range .Values.tests }}
          test.expect = {{ .expect }}
          test.service = "{{ .service }}"
          test.endpoint = "https://{{ .service }}.{{ $clusterFQDN }}{{ .endpoint }}"
          test.authenticate = {{ .authenticate }}
          tests.push(JSON.parse(JSON.stringify(test))); // Deep-ish copy
          {{- end }}

          for (let i = 0; i < tests.length; i++) {

            let tags = {"name": tests[i].endpoint, "service": tests[i].service};
            
            // We add 1 critical error. If it is 0 nothing is sent to InfluxDB. Grafana will need to subtract 1 from the total.
            criticalFail.add(1, tags);

            let params = { tags: tags }

            if (tests[i].authenticate == true) {
              params = {
                  tags: tags,
                  headers: { 
                      "Content-Type": "application/json",
                      "Authorization": "Bearer " + serviceAccountToken
                  }
              };
            }

            let res = http.get(tests[i].endpoint, params);
            
            // console.log(JSON.stringify(res, null, 4));
        
            if (check(res, {
              "no errors": (r) => r.error === ""
            }, tags)){
              criticalPass.add(1, tags);
            }else{
              console.log(res.error)
              criticalFail.add(1, tags);
            }
            
            if (check(res, {
              "expected HTTP status": (r) => r.status === tests[i].expect
            }, tags)){
              criticalPass.add(1, tags);
            }else{
              console.log("Unexpected HTTP status, wanted " + tests[i].expect + " but got " + res.status)
              criticalFail.add(1, tags);
            }

          }

          sleep(5);

      }